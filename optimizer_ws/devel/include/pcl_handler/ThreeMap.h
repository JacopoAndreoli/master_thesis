// Generated by gencpp from file pcl_handler/ThreeMap.msg
// DO NOT EDIT!


#ifndef PCL_HANDLER_MESSAGE_THREEMAP_H
#define PCL_HANDLER_MESSAGE_THREEMAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/Image.h>

namespace pcl_handler
{
template <class ContainerAllocator>
struct ThreeMap_
{
  typedef ThreeMap_<ContainerAllocator> Type;

  ThreeMap_()
    : header()
    , Var_map()
    , LSD_map()
    , coloredImage()
    , cameraMatrix()
    , RotationMatrix()
    , translationVector()  {
    }
  ThreeMap_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Var_map(_alloc)
    , LSD_map(_alloc)
    , coloredImage(_alloc)
    , cameraMatrix(_alloc)
    , RotationMatrix(_alloc)
    , translationVector(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _Var_map_type;
  _Var_map_type Var_map;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _LSD_map_type;
  _LSD_map_type LSD_map;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _coloredImage_type;
  _coloredImage_type coloredImage;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cameraMatrix_type;
  _cameraMatrix_type cameraMatrix;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _RotationMatrix_type;
  _RotationMatrix_type RotationMatrix;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _translationVector_type;
  _translationVector_type translationVector;





  typedef boost::shared_ptr< ::pcl_handler::ThreeMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pcl_handler::ThreeMap_<ContainerAllocator> const> ConstPtr;

}; // struct ThreeMap_

typedef ::pcl_handler::ThreeMap_<std::allocator<void> > ThreeMap;

typedef boost::shared_ptr< ::pcl_handler::ThreeMap > ThreeMapPtr;
typedef boost::shared_ptr< ::pcl_handler::ThreeMap const> ThreeMapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pcl_handler::ThreeMap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pcl_handler::ThreeMap_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pcl_handler::ThreeMap_<ContainerAllocator1> & lhs, const ::pcl_handler::ThreeMap_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Var_map == rhs.Var_map &&
    lhs.LSD_map == rhs.LSD_map &&
    lhs.coloredImage == rhs.coloredImage &&
    lhs.cameraMatrix == rhs.cameraMatrix &&
    lhs.RotationMatrix == rhs.RotationMatrix &&
    lhs.translationVector == rhs.translationVector;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pcl_handler::ThreeMap_<ContainerAllocator1> & lhs, const ::pcl_handler::ThreeMap_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pcl_handler

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pcl_handler::ThreeMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pcl_handler::ThreeMap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pcl_handler::ThreeMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pcl_handler::ThreeMap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pcl_handler::ThreeMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pcl_handler::ThreeMap_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pcl_handler::ThreeMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "35eb6653c31b68cb2b3203e9acd1f9e4";
  }

  static const char* value(const ::pcl_handler::ThreeMap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x35eb6653c31b68cbULL;
  static const uint64_t static_value2 = 0x2b3203e9acd1f9e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::pcl_handler::ThreeMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pcl_handler/ThreeMap";
  }

  static const char* value(const ::pcl_handler::ThreeMap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pcl_handler::ThreeMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header \n"
"float32[] Var_map\n"
"float32[] LSD_map\n"
"sensor_msgs/Image coloredImage\n"
"float32[] cameraMatrix\n"
"float32[] RotationMatrix\n"
"float32[] translationVector\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
;
  }

  static const char* value(const ::pcl_handler::ThreeMap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pcl_handler::ThreeMap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Var_map);
      stream.next(m.LSD_map);
      stream.next(m.coloredImage);
      stream.next(m.cameraMatrix);
      stream.next(m.RotationMatrix);
      stream.next(m.translationVector);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ThreeMap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pcl_handler::ThreeMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pcl_handler::ThreeMap_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Var_map[]" << std::endl;
    for (size_t i = 0; i < v.Var_map.size(); ++i)
    {
      s << indent << "  Var_map[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.Var_map[i]);
    }
    s << indent << "LSD_map[]" << std::endl;
    for (size_t i = 0; i < v.LSD_map.size(); ++i)
    {
      s << indent << "  LSD_map[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.LSD_map[i]);
    }
    s << indent << "coloredImage: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.coloredImage);
    s << indent << "cameraMatrix[]" << std::endl;
    for (size_t i = 0; i < v.cameraMatrix.size(); ++i)
    {
      s << indent << "  cameraMatrix[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cameraMatrix[i]);
    }
    s << indent << "RotationMatrix[]" << std::endl;
    for (size_t i = 0; i < v.RotationMatrix.size(); ++i)
    {
      s << indent << "  RotationMatrix[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.RotationMatrix[i]);
    }
    s << indent << "translationVector[]" << std::endl;
    for (size_t i = 0; i < v.translationVector.size(); ++i)
    {
      s << indent << "  translationVector[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.translationVector[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PCL_HANDLER_MESSAGE_THREEMAP_H
